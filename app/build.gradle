apply plugin: 'com.android.application'

ext {
    AppVersionCode = 100000
    AppVersionName = "1.0.0"

    //anko_version = '0.10.7'

    release_path="../../apk"
}
android {
    compileSdkVersion 28

    signingConfigs {
        config {
            keyAlias 'phill'
            keyPassword 'phill0626'
            storeFile file('../../../KeyStore/platform.keystore')
            storePassword 'phill0626'
        }
    }


    defaultConfig {
        applicationId "com.ph.sysinformation"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode AppVersionCode
        versionName AppVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.config
        }
        debug{
            signingConfig signingConfigs.config
        }

    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:28.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:design:28.0.0'
}


task releaseDeploy {
    doLast{
        //def name_prefix = "${project.name}_${AppVersionName}_${AppVersionCode}_${buildDate}"
        def name_prefix = "${rootProject.name}-${AppVersionName}"
        def mapping_suffix = "_mapping.zip"
        def mapping_name = "${name_prefix}${mapping_suffix}"
        def mapping_dest = "build/distributions/${mapping_name}"
        def mapping_from = "build/outputs/mapping/release"

        def release_apk = "build/outputs/apk/release"

        // APK 배포
        task(deployApk, type: Copy) {
            from "${release_apk}"
            into "${release_path}"
            rename('.*.apk', "${name_prefix}.apk")
            include('**/*release.apk')
        }.execute()

        // Debug용 Mapping 파일 압축
        task(mappingZip, type: Zip) {
            from "${mapping_from}"
            archiveName "${mapping_name}"
        }.execute()

        // Mapping 파일 배포
        task(deployMapping, type: Copy) {
            from "${mapping_dest}"
            into "${release_path}"
            include("*${mapping_suffix}")
        }.execute()
    }
}

task releaseBuild(dependsOn: ['assembleRelease']) {
}

task release(dependsOn: ['clean', 'releaseBuild', 'releaseDeploy']) {
    releaseBuild.mustRunAfter clean
    releaseDeploy.mustRunAfter releaseBuild
}